// Code generated by goa v3.10.2, DO NOT EDIT.
//
// datasets_service HTTP server types
//
// Command:
// $ goa gen github.com/inst-api/parser/design

package server

import (
	datasetsservice "github.com/inst-api/parser/gen/datasets_service"
)

// UpdateDatasetRequestBody is the type of the "datasets_service" service
// "update dataset" endpoint HTTP request body.
type UpdateDatasetRequestBody struct {
	// имена аккаунтов, для которых ищем похожих
	OriginalAccounts []string `json:"original_accounts"`
	// код региона, по которому будем сортировать
	PhoneCode *int `json:"phone_code"`
	// название задачи
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// UpdateDatasetOKResponseBody is the type of the "datasets_service" service
// "update dataset" endpoint HTTP response body.
type UpdateDatasetOKResponseBody struct {
	ID       string                 `form:"id" json:"id" xml:"id"`
	Bloggers []*BloggerResponseBody `form:"bloggers" json:"bloggers" xml:"bloggers"`
	Status   int                    `form:"status" json:"status" xml:"status"`
	// название задачи
	Title string `form:"title" json:"title" xml:"title"`
}

// FindSimilarOKResponseBody is the type of the "datasets_service" service
// "find similar" endpoint HTTP response body.
type FindSimilarOKResponseBody struct {
	Status int `form:"status" json:"status" xml:"status"`
	// id задачи
	DatasetID string                 `json:"dataset_id"`
	Bloggers  []*BloggerResponseBody `form:"bloggers" json:"bloggers" xml:"bloggers"`
}

// ParseDatasetOKResponseBody is the type of the "datasets_service" service
// "parse dataset" endpoint HTTP response body.
type ParseDatasetOKResponseBody struct {
	Status int `form:"status" json:"status" xml:"status"`
	// id задачи
	DatasetID string `json:"dataset_id"`
}

// GetDatasetOKResponseBody is the type of the "datasets_service" service "get
// dataset" endpoint HTTP response body.
type GetDatasetOKResponseBody struct {
	ID       string                 `form:"id" json:"id" xml:"id"`
	Bloggers []*BloggerResponseBody `form:"bloggers" json:"bloggers" xml:"bloggers"`
	Status   int                    `form:"status" json:"status" xml:"status"`
	// название задачи
	Title string `form:"title" json:"title" xml:"title"`
}

// GetProgressOKResponseBody is the type of the "datasets_service" service "get
// progress" endpoint HTTP response body.
type GetProgressOKResponseBody struct {
	// результат работы по каждому боту, ключ- имя бота
	BotsProgresses map[string]*BloggersProgressResponseBody `json:"bots_progresses"`
	// количество аккаунтов, которых упомянули в постах
	TargetsNotified int `json:"targets_notified"`
	// количество аккаунтов, которых не получилось упомянуть, при перезапуске
	// задачи будут использованы заново
	TargetsFailed int `json:"targets_failed"`
	// количество аккаунтов, которых не выбрали для постов
	TargetsWaiting int `json:"targets_waiting,targets_waiting"`
	// закончена ли задача
	Done bool `form:"done" json:"done" xml:"done"`
}

// ListDatasetsResponseBody is the type of the "datasets_service" service "list
// datasets" endpoint HTTP response body.
type ListDatasetsResponseBody []*DatasetResponse

// BloggerResponseBody is used to define fields on response body types.
type BloggerResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// имя аккаунта в инстаграме
	Username string `form:"username" json:"username" xml:"username"`
	// user_id в инстаграме, -1 если неизвестен
	UserID int64 `json:"user_id"`
	// айди датасета, к которому принадлежит блоггер
	DatasetID string `json:"dataset_id"`
	// является ли блоггер изначально в датасете или появился при парсинге
	IsInitial bool `json:"is_initial"`
}

// BloggersProgressResponseBody is used to define fields on response body types.
type BloggersProgressResponseBody struct {
	// имя пользователя бота
	UserName string `json:"user_name"`
	// количество выложенных постов
	PostsCount int `json:"posts_count"`
	// текущий статус бота, будут ли выкладываться посты
	Status int `form:"status" json:"status" xml:"status"`
}

// DatasetResponse is used to define fields on response body types.
type DatasetResponse struct {
	ID       string             `form:"id" json:"id" xml:"id"`
	Bloggers []*BloggerResponse `form:"bloggers" json:"bloggers" xml:"bloggers"`
	Status   int                `form:"status" json:"status" xml:"status"`
	// название задачи
	Title string `form:"title" json:"title" xml:"title"`
}

// BloggerResponse is used to define fields on response body types.
type BloggerResponse struct {
	ID string `form:"id" json:"id" xml:"id"`
	// имя аккаунта в инстаграме
	Username string `form:"username" json:"username" xml:"username"`
	// user_id в инстаграме, -1 если неизвестен
	UserID int64 `json:"user_id"`
	// айди датасета, к которому принадлежит блоггер
	DatasetID string `json:"dataset_id"`
	// является ли блоггер изначально в датасете или появился при парсинге
	IsInitial bool `json:"is_initial"`
}

// NewUpdateDatasetOKResponseBody builds the HTTP response body from the result
// of the "update dataset" endpoint of the "datasets_service" service.
func NewUpdateDatasetOKResponseBody(res *datasetsservice.Dataset) *UpdateDatasetOKResponseBody {
	body := &UpdateDatasetOKResponseBody{
		ID:     res.ID,
		Status: int(res.Status),
		Title:  res.Title,
	}
	if res.Bloggers != nil {
		body.Bloggers = make([]*BloggerResponseBody, len(res.Bloggers))
		for i, val := range res.Bloggers {
			body.Bloggers[i] = marshalDatasetsserviceBloggerToBloggerResponseBody(val)
		}
	}
	return body
}

// NewFindSimilarOKResponseBody builds the HTTP response body from the result
// of the "find similar" endpoint of the "datasets_service" service.
func NewFindSimilarOKResponseBody(res *datasetsservice.FindSimilarResult) *FindSimilarOKResponseBody {
	body := &FindSimilarOKResponseBody{
		Status:    int(res.Status),
		DatasetID: res.DatasetID,
	}
	if res.Bloggers != nil {
		body.Bloggers = make([]*BloggerResponseBody, len(res.Bloggers))
		for i, val := range res.Bloggers {
			body.Bloggers[i] = marshalDatasetsserviceBloggerToBloggerResponseBody(val)
		}
	}
	return body
}

// NewParseDatasetOKResponseBody builds the HTTP response body from the result
// of the "parse dataset" endpoint of the "datasets_service" service.
func NewParseDatasetOKResponseBody(res *datasetsservice.ParseDatasetResult) *ParseDatasetOKResponseBody {
	body := &ParseDatasetOKResponseBody{
		Status:    int(res.Status),
		DatasetID: res.DatasetID,
	}
	return body
}

// NewGetDatasetOKResponseBody builds the HTTP response body from the result of
// the "get dataset" endpoint of the "datasets_service" service.
func NewGetDatasetOKResponseBody(res *datasetsservice.Dataset) *GetDatasetOKResponseBody {
	body := &GetDatasetOKResponseBody{
		ID:     res.ID,
		Status: int(res.Status),
		Title:  res.Title,
	}
	if res.Bloggers != nil {
		body.Bloggers = make([]*BloggerResponseBody, len(res.Bloggers))
		for i, val := range res.Bloggers {
			body.Bloggers[i] = marshalDatasetsserviceBloggerToBloggerResponseBody(val)
		}
	}
	return body
}

// NewGetProgressOKResponseBody builds the HTTP response body from the result
// of the "get progress" endpoint of the "datasets_service" service.
func NewGetProgressOKResponseBody(res *datasetsservice.DatasetProgress) *GetProgressOKResponseBody {
	body := &GetProgressOKResponseBody{
		TargetsNotified: res.TargetsNotified,
		TargetsFailed:   res.TargetsFailed,
		TargetsWaiting:  res.TargetsWaiting,
		Done:            res.Done,
	}
	if res.BotsProgresses != nil {
		body.BotsProgresses = make(map[string]*BloggersProgressResponseBody, len(res.BotsProgresses))
		for key, val := range res.BotsProgresses {
			tk := key
			body.BotsProgresses[tk] = marshalDatasetsserviceBloggersProgressToBloggersProgressResponseBody(val)
		}
	}
	return body
}

// NewListDatasetsResponseBody builds the HTTP response body from the result of
// the "list datasets" endpoint of the "datasets_service" service.
func NewListDatasetsResponseBody(res []*datasetsservice.Dataset) ListDatasetsResponseBody {
	body := make([]*DatasetResponse, len(res))
	for i, val := range res {
		body[i] = marshalDatasetsserviceDatasetToDatasetResponse(val)
	}
	return body
}

// NewCreateDatasetDraftPayload builds a datasets_service service create
// dataset draft endpoint payload.
func NewCreateDatasetDraftPayload(token string) *datasetsservice.CreateDatasetDraftPayload {
	v := &datasetsservice.CreateDatasetDraftPayload{}
	v.Token = token

	return v
}

// NewUpdateDatasetPayload builds a datasets_service service update dataset
// endpoint payload.
func NewUpdateDatasetPayload(body *UpdateDatasetRequestBody, datasetID string, token string) *datasetsservice.UpdateDatasetPayload {
	v := &datasetsservice.UpdateDatasetPayload{
		PhoneCode: body.PhoneCode,
		Title:     body.Title,
	}
	if body.OriginalAccounts != nil {
		v.OriginalAccounts = make([]string, len(body.OriginalAccounts))
		for i, val := range body.OriginalAccounts {
			v.OriginalAccounts[i] = val
		}
	}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewFindSimilarPayload builds a datasets_service service find similar
// endpoint payload.
func NewFindSimilarPayload(datasetID string, token string) *datasetsservice.FindSimilarPayload {
	v := &datasetsservice.FindSimilarPayload{}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewParseDatasetPayload builds a datasets_service service parse dataset
// endpoint payload.
func NewParseDatasetPayload(datasetID string, token string) *datasetsservice.ParseDatasetPayload {
	v := &datasetsservice.ParseDatasetPayload{}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewGetDatasetPayload builds a datasets_service service get dataset endpoint
// payload.
func NewGetDatasetPayload(datasetID string, token string) *datasetsservice.GetDatasetPayload {
	v := &datasetsservice.GetDatasetPayload{}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewGetProgressPayload builds a datasets_service service get progress
// endpoint payload.
func NewGetProgressPayload(datasetID string, token string) *datasetsservice.GetProgressPayload {
	v := &datasetsservice.GetProgressPayload{}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewListDatasetsPayload builds a datasets_service service list datasets
// endpoint payload.
func NewListDatasetsPayload(token string) *datasetsservice.ListDatasetsPayload {
	v := &datasetsservice.ListDatasetsPayload{}
	v.Token = token

	return v
}
