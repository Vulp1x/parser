// Code generated by goa v3.10.2, DO NOT EDIT.
//
// datasets_service HTTP server types
//
// Command:
// $ goa gen github.com/inst-api/parser/design

package server

import (
	datasetsservice "github.com/inst-api/parser/gen/datasets_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateDatasetDraftRequestBody is the type of the "datasets_service" service
// "create dataset draft" endpoint HTTP request body.
type CreateDatasetDraftRequestBody struct {
	// название задачи
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// имена аккаунтов, для которых ищем похожих
	OriginalAccounts []string `json:"original_accounts"`
}

// UpdateDatasetRequestBody is the type of the "datasets_service" service
// "update dataset" endpoint HTTP request body.
type UpdateDatasetRequestBody struct {
	// имена аккаунтов, для которых ищем похожих
	OriginalAccounts []string `json:"original_accounts"`
}

// FindSimilarRequestBody is the type of the "datasets_service" service "find
// similar" endpoint HTTP request body.
type FindSimilarRequestBody struct {
	// код региона, фильтруем аккаунты по нему
	FilterCode *int `json:"filter_code"`
}

// UpdateDatasetOKResponseBody is the type of the "datasets_service" service
// "update dataset" endpoint HTTP response body.
type UpdateDatasetOKResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// описание под постом
	TextTemplate string `json:"text_template"`
	// список base64 строк картинок
	PostImages []string `json:"post_images"`
	// имена аккаунтов, на которых ведем трафик
	LandingAccounts []string `json:"landing_accounts"`
	// имена для аккаунтов-ботов
	BotNames []string `json:"bot_names"`
	// фамилии для аккаунтов-ботов
	BotLastNames []string `json:"bot_last_names"`
	// аватарки для ботов
	BotImages []string `json:"bot_images"`
	// ссылки для описания у ботов
	BotUrls []string `json:"bot_urls"`
	Status  int      `form:"status" json:"status" xml:"status"`
	// название задачи
	Title string `form:"title" json:"title" xml:"title"`
	// количество ботов в задаче
	BotsNum int `json:"bots_num"`
	// количество резидентских прокси в задаче
	ResidentialProxiesNum int `json:"residential_proxies_num"`
	// количество дешёвых прокси в задаче
	CheapProxiesNum int `json:"cheap_proxies_num"`
	// количество целевых пользователей в задаче
	TargetsNum int `json:"targets_num"`
	// название файла, из которого брали ботов
	BotsFilename *string `json:"bots_filename"`
	// название файла, из которого брали резидентские прокси
	ResidentialProxiesFilename *string `json:"residential_proxies_filename"`
	// название файла, из которого брали дешёвые прокси
	CheapProxiesFilename *string `json:"cheap_proxies_filename"`
	// название файла, из которого брали целевых пользователей
	TargetsFilename *string `json:"targets_filename"`
	// нужно ли подписываться на аккаунты
	FollowTargets bool `json:"follow_targets"`
	// делать отметки на фотографии
	NeedPhotoTags bool `json:"need_photo_tags"`
	// делать отметки на фотографии
	PerPostSleepSeconds uint `json:"per_post_sleep_seconds"`
	// задержка перед проставлением отметок
	PhotoTagsDelaySeconds uint `json:"photo_tags_delay_seconds"`
	// количество постов для каждого бота
	PostsPerBot uint `json:"posts_per_bot"`
	// количество упоминаний под каждым постом
	TargetsPerPost uint `json:"targets_per_post"`
}

// FindSimilarOKResponseBody is the type of the "datasets_service" service
// "find similar" endpoint HTTP response body.
type FindSimilarOKResponseBody struct {
	Status int `form:"status" json:"status" xml:"status"`
	// id задачи
	DatasetID string                 `json:"dataset_id"`
	Bloggers  []*BloggerResponseBody `form:"bloggers" json:"bloggers" xml:"bloggers"`
}

// ParseDatasetOKResponseBody is the type of the "datasets_service" service
// "parse dataset" endpoint HTTP response body.
type ParseDatasetOKResponseBody struct {
	Status int `form:"status" json:"status" xml:"status"`
	// id задачи
	DatasetID string `json:"dataset_id"`
}

// GetDatasetOKResponseBody is the type of the "datasets_service" service "get
// dataset" endpoint HTTP response body.
type GetDatasetOKResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// описание под постом
	TextTemplate string `json:"text_template"`
	// список base64 строк картинок
	PostImages []string `json:"post_images"`
	// имена аккаунтов, на которых ведем трафик
	LandingAccounts []string `json:"landing_accounts"`
	// имена для аккаунтов-ботов
	BotNames []string `json:"bot_names"`
	// фамилии для аккаунтов-ботов
	BotLastNames []string `json:"bot_last_names"`
	// аватарки для ботов
	BotImages []string `json:"bot_images"`
	// ссылки для описания у ботов
	BotUrls []string `json:"bot_urls"`
	Status  int      `form:"status" json:"status" xml:"status"`
	// название задачи
	Title string `form:"title" json:"title" xml:"title"`
	// количество ботов в задаче
	BotsNum int `json:"bots_num"`
	// количество резидентских прокси в задаче
	ResidentialProxiesNum int `json:"residential_proxies_num"`
	// количество дешёвых прокси в задаче
	CheapProxiesNum int `json:"cheap_proxies_num"`
	// количество целевых пользователей в задаче
	TargetsNum int `json:"targets_num"`
	// название файла, из которого брали ботов
	BotsFilename *string `json:"bots_filename"`
	// название файла, из которого брали резидентские прокси
	ResidentialProxiesFilename *string `json:"residential_proxies_filename"`
	// название файла, из которого брали дешёвые прокси
	CheapProxiesFilename *string `json:"cheap_proxies_filename"`
	// название файла, из которого брали целевых пользователей
	TargetsFilename *string `json:"targets_filename"`
	// нужно ли подписываться на аккаунты
	FollowTargets bool `json:"follow_targets"`
	// делать отметки на фотографии
	NeedPhotoTags bool `json:"need_photo_tags"`
	// делать отметки на фотографии
	PerPostSleepSeconds uint `json:"per_post_sleep_seconds"`
	// задержка перед проставлением отметок
	PhotoTagsDelaySeconds uint `json:"photo_tags_delay_seconds"`
	// количество постов для каждого бота
	PostsPerBot uint `json:"posts_per_bot"`
	// количество упоминаний под каждым постом
	TargetsPerPost uint `json:"targets_per_post"`
}

// GetProgressOKResponseBody is the type of the "datasets_service" service "get
// progress" endpoint HTTP response body.
type GetProgressOKResponseBody struct {
	// результат работы по каждому боту, ключ- имя бота
	BotsProgresses map[string]*BloggersProgressResponseBody `json:"bots_progresses"`
	// количество аккаунтов, которых упомянули в постах
	TargetsNotified int `json:"targets_notified"`
	// количество аккаунтов, которых не получилось упомянуть, при перезапуске
	// задачи будут использованы заново
	TargetsFailed int `json:"targets_failed"`
	// количество аккаунтов, которых не выбрали для постов
	TargetsWaiting int `json:"targets_waiting,targets_waiting"`
	// закончена ли задача
	Done bool `form:"done" json:"done" xml:"done"`
}

// ListDatasetsResponseBody is the type of the "datasets_service" service "list
// datasets" endpoint HTTP response body.
type ListDatasetsResponseBody []*DatasetResponse

// BloggerResponseBody is used to define fields on response body types.
type BloggerResponseBody struct {
	// логин блогера
	Login string `form:"login" json:"login" xml:"login"`
	// user_id блогера
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
}

// BloggersProgressResponseBody is used to define fields on response body types.
type BloggersProgressResponseBody struct {
	// имя пользователя бота
	UserName string `json:"user_name"`
	// количество выложенных постов
	PostsCount int `json:"posts_count"`
	// текущий статус бота, будут ли выкладываться посты
	Status int `form:"status" json:"status" xml:"status"`
}

// DatasetResponse is used to define fields on response body types.
type DatasetResponse struct {
	ID string `form:"id" json:"id" xml:"id"`
	// описание под постом
	TextTemplate string `json:"text_template"`
	// список base64 строк картинок
	PostImages []string `json:"post_images"`
	// имена аккаунтов, на которых ведем трафик
	LandingAccounts []string `json:"landing_accounts"`
	// имена для аккаунтов-ботов
	BotNames []string `json:"bot_names"`
	// фамилии для аккаунтов-ботов
	BotLastNames []string `json:"bot_last_names"`
	// аватарки для ботов
	BotImages []string `json:"bot_images"`
	// ссылки для описания у ботов
	BotUrls []string `json:"bot_urls"`
	Status  int      `form:"status" json:"status" xml:"status"`
	// название задачи
	Title string `form:"title" json:"title" xml:"title"`
	// количество ботов в задаче
	BotsNum int `json:"bots_num"`
	// количество резидентских прокси в задаче
	ResidentialProxiesNum int `json:"residential_proxies_num"`
	// количество дешёвых прокси в задаче
	CheapProxiesNum int `json:"cheap_proxies_num"`
	// количество целевых пользователей в задаче
	TargetsNum int `json:"targets_num"`
	// название файла, из которого брали ботов
	BotsFilename *string `json:"bots_filename"`
	// название файла, из которого брали резидентские прокси
	ResidentialProxiesFilename *string `json:"residential_proxies_filename"`
	// название файла, из которого брали дешёвые прокси
	CheapProxiesFilename *string `json:"cheap_proxies_filename"`
	// название файла, из которого брали целевых пользователей
	TargetsFilename *string `json:"targets_filename"`
	// нужно ли подписываться на аккаунты
	FollowTargets bool `json:"follow_targets"`
	// делать отметки на фотографии
	NeedPhotoTags bool `json:"need_photo_tags"`
	// делать отметки на фотографии
	PerPostSleepSeconds uint `json:"per_post_sleep_seconds"`
	// задержка перед проставлением отметок
	PhotoTagsDelaySeconds uint `json:"photo_tags_delay_seconds"`
	// количество постов для каждого бота
	PostsPerBot uint `json:"posts_per_bot"`
	// количество упоминаний под каждым постом
	TargetsPerPost uint `json:"targets_per_post"`
}

// NewUpdateDatasetOKResponseBody builds the HTTP response body from the result
// of the "update dataset" endpoint of the "datasets_service" service.
func NewUpdateDatasetOKResponseBody(res *datasetsservice.Dataset) *UpdateDatasetOKResponseBody {
	body := &UpdateDatasetOKResponseBody{
		ID:                         res.ID,
		TextTemplate:               res.TextTemplate,
		Status:                     int(res.Status),
		Title:                      res.Title,
		BotsNum:                    res.BotsNum,
		ResidentialProxiesNum:      res.ResidentialProxiesNum,
		CheapProxiesNum:            res.CheapProxiesNum,
		TargetsNum:                 res.TargetsNum,
		BotsFilename:               res.BotsFilename,
		ResidentialProxiesFilename: res.ResidentialProxiesFilename,
		CheapProxiesFilename:       res.CheapProxiesFilename,
		TargetsFilename:            res.TargetsFilename,
		FollowTargets:              res.FollowTargets,
		NeedPhotoTags:              res.NeedPhotoTags,
		PerPostSleepSeconds:        res.PerPostSleepSeconds,
		PhotoTagsDelaySeconds:      res.PhotoTagsDelaySeconds,
		PostsPerBot:                res.PostsPerBot,
		TargetsPerPost:             res.TargetsPerPost,
	}
	if res.PostImages != nil {
		body.PostImages = make([]string, len(res.PostImages))
		for i, val := range res.PostImages {
			body.PostImages[i] = val
		}
	}
	if res.LandingAccounts != nil {
		body.LandingAccounts = make([]string, len(res.LandingAccounts))
		for i, val := range res.LandingAccounts {
			body.LandingAccounts[i] = val
		}
	}
	if res.BotNames != nil {
		body.BotNames = make([]string, len(res.BotNames))
		for i, val := range res.BotNames {
			body.BotNames[i] = val
		}
	}
	if res.BotLastNames != nil {
		body.BotLastNames = make([]string, len(res.BotLastNames))
		for i, val := range res.BotLastNames {
			body.BotLastNames[i] = val
		}
	}
	if res.BotImages != nil {
		body.BotImages = make([]string, len(res.BotImages))
		for i, val := range res.BotImages {
			body.BotImages[i] = val
		}
	}
	if res.BotUrls != nil {
		body.BotUrls = make([]string, len(res.BotUrls))
		for i, val := range res.BotUrls {
			body.BotUrls[i] = val
		}
	}
	return body
}

// NewFindSimilarOKResponseBody builds the HTTP response body from the result
// of the "find similar" endpoint of the "datasets_service" service.
func NewFindSimilarOKResponseBody(res *datasetsservice.FindSimilarResult) *FindSimilarOKResponseBody {
	body := &FindSimilarOKResponseBody{
		Status:    int(res.Status),
		DatasetID: res.DatasetID,
	}
	if res.Bloggers != nil {
		body.Bloggers = make([]*BloggerResponseBody, len(res.Bloggers))
		for i, val := range res.Bloggers {
			body.Bloggers[i] = marshalDatasetsserviceBloggerToBloggerResponseBody(val)
		}
	}
	return body
}

// NewParseDatasetOKResponseBody builds the HTTP response body from the result
// of the "parse dataset" endpoint of the "datasets_service" service.
func NewParseDatasetOKResponseBody(res *datasetsservice.ParseDatasetResult) *ParseDatasetOKResponseBody {
	body := &ParseDatasetOKResponseBody{
		Status:    int(res.Status),
		DatasetID: res.DatasetID,
	}
	return body
}

// NewGetDatasetOKResponseBody builds the HTTP response body from the result of
// the "get dataset" endpoint of the "datasets_service" service.
func NewGetDatasetOKResponseBody(res *datasetsservice.Dataset) *GetDatasetOKResponseBody {
	body := &GetDatasetOKResponseBody{
		ID:                         res.ID,
		TextTemplate:               res.TextTemplate,
		Status:                     int(res.Status),
		Title:                      res.Title,
		BotsNum:                    res.BotsNum,
		ResidentialProxiesNum:      res.ResidentialProxiesNum,
		CheapProxiesNum:            res.CheapProxiesNum,
		TargetsNum:                 res.TargetsNum,
		BotsFilename:               res.BotsFilename,
		ResidentialProxiesFilename: res.ResidentialProxiesFilename,
		CheapProxiesFilename:       res.CheapProxiesFilename,
		TargetsFilename:            res.TargetsFilename,
		FollowTargets:              res.FollowTargets,
		NeedPhotoTags:              res.NeedPhotoTags,
		PerPostSleepSeconds:        res.PerPostSleepSeconds,
		PhotoTagsDelaySeconds:      res.PhotoTagsDelaySeconds,
		PostsPerBot:                res.PostsPerBot,
		TargetsPerPost:             res.TargetsPerPost,
	}
	if res.PostImages != nil {
		body.PostImages = make([]string, len(res.PostImages))
		for i, val := range res.PostImages {
			body.PostImages[i] = val
		}
	}
	if res.LandingAccounts != nil {
		body.LandingAccounts = make([]string, len(res.LandingAccounts))
		for i, val := range res.LandingAccounts {
			body.LandingAccounts[i] = val
		}
	}
	if res.BotNames != nil {
		body.BotNames = make([]string, len(res.BotNames))
		for i, val := range res.BotNames {
			body.BotNames[i] = val
		}
	}
	if res.BotLastNames != nil {
		body.BotLastNames = make([]string, len(res.BotLastNames))
		for i, val := range res.BotLastNames {
			body.BotLastNames[i] = val
		}
	}
	if res.BotImages != nil {
		body.BotImages = make([]string, len(res.BotImages))
		for i, val := range res.BotImages {
			body.BotImages[i] = val
		}
	}
	if res.BotUrls != nil {
		body.BotUrls = make([]string, len(res.BotUrls))
		for i, val := range res.BotUrls {
			body.BotUrls[i] = val
		}
	}
	return body
}

// NewGetProgressOKResponseBody builds the HTTP response body from the result
// of the "get progress" endpoint of the "datasets_service" service.
func NewGetProgressOKResponseBody(res *datasetsservice.DatasetProgress) *GetProgressOKResponseBody {
	body := &GetProgressOKResponseBody{
		TargetsNotified: res.TargetsNotified,
		TargetsFailed:   res.TargetsFailed,
		TargetsWaiting:  res.TargetsWaiting,
		Done:            res.Done,
	}
	if res.BotsProgresses != nil {
		body.BotsProgresses = make(map[string]*BloggersProgressResponseBody, len(res.BotsProgresses))
		for key, val := range res.BotsProgresses {
			tk := key
			body.BotsProgresses[tk] = marshalDatasetsserviceBloggersProgressToBloggersProgressResponseBody(val)
		}
	}
	return body
}

// NewListDatasetsResponseBody builds the HTTP response body from the result of
// the "list datasets" endpoint of the "datasets_service" service.
func NewListDatasetsResponseBody(res []*datasetsservice.Dataset) ListDatasetsResponseBody {
	body := make([]*DatasetResponse, len(res))
	for i, val := range res {
		body[i] = marshalDatasetsserviceDatasetToDatasetResponse(val)
	}
	return body
}

// NewCreateDatasetDraftPayload builds a datasets_service service create
// dataset draft endpoint payload.
func NewCreateDatasetDraftPayload(body *CreateDatasetDraftRequestBody, token string) *datasetsservice.CreateDatasetDraftPayload {
	v := &datasetsservice.CreateDatasetDraftPayload{
		Title: *body.Title,
	}
	v.OriginalAccounts = make([]string, len(body.OriginalAccounts))
	for i, val := range body.OriginalAccounts {
		v.OriginalAccounts[i] = val
	}
	v.Token = token

	return v
}

// NewUpdateDatasetPayload builds a datasets_service service update dataset
// endpoint payload.
func NewUpdateDatasetPayload(body *UpdateDatasetRequestBody, datasetID string, token string) *datasetsservice.UpdateDatasetPayload {
	v := &datasetsservice.UpdateDatasetPayload{}
	if body.OriginalAccounts != nil {
		v.OriginalAccounts = make([]string, len(body.OriginalAccounts))
		for i, val := range body.OriginalAccounts {
			v.OriginalAccounts[i] = val
		}
	}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewFindSimilarPayload builds a datasets_service service find similar
// endpoint payload.
func NewFindSimilarPayload(body *FindSimilarRequestBody, datasetID string, token string) *datasetsservice.FindSimilarPayload {
	v := &datasetsservice.FindSimilarPayload{
		FilterCode: body.FilterCode,
	}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewParseDatasetPayload builds a datasets_service service parse dataset
// endpoint payload.
func NewParseDatasetPayload(datasetID string, token string) *datasetsservice.ParseDatasetPayload {
	v := &datasetsservice.ParseDatasetPayload{}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewGetDatasetPayload builds a datasets_service service get dataset endpoint
// payload.
func NewGetDatasetPayload(datasetID string, token string) *datasetsservice.GetDatasetPayload {
	v := &datasetsservice.GetDatasetPayload{}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewGetProgressPayload builds a datasets_service service get progress
// endpoint payload.
func NewGetProgressPayload(datasetID string, token string) *datasetsservice.GetProgressPayload {
	v := &datasetsservice.GetProgressPayload{}
	v.DatasetID = datasetID
	v.Token = token

	return v
}

// NewListDatasetsPayload builds a datasets_service service list datasets
// endpoint payload.
func NewListDatasetsPayload(token string) *datasetsservice.ListDatasetsPayload {
	v := &datasetsservice.ListDatasetsPayload{}
	v.Token = token

	return v
}

// ValidateCreateDatasetDraftRequestBody runs the validations defined on Create
// Dataset DraftRequestBody
func ValidateCreateDatasetDraftRequestBody(body *CreateDatasetDraftRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.OriginalAccounts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("original_accounts", "body"))
	}
	return
}
