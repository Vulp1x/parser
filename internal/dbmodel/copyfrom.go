// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: copyfrom.go

package dbmodel

import (
	"context"
)

// iteratorForInsertInitialBloggers implements pgx.CopyFromSource.
type iteratorForInsertInitialBloggers struct {
	rows                 []InsertInitialBloggersParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertInitialBloggers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertInitialBloggers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].DatasetID,
		r.rows[0].Username,
		r.rows[0].UserID,
		r.rows[0].IsInitial,
	}, nil
}

func (r iteratorForInsertInitialBloggers) Err() error {
	return nil
}

func (q *Queries) InsertInitialBloggers(ctx context.Context, arg []InsertInitialBloggersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"bloggers"}, []string{"dataset_id", "username", "user_id", "is_initial"}, &iteratorForInsertInitialBloggers{rows: arg})
}

// iteratorForSaveBotAccounts implements pgx.CopyFromSource.
type iteratorForSaveBotAccounts struct {
	rows                 []SaveBotAccountsParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveBotAccounts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveBotAccounts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Username,
		r.rows[0].SessionID,
		r.rows[0].Proxy,
		r.rows[0].IsBlocked,
		r.rows[0].StartedAt,
	}, nil
}

func (r iteratorForSaveBotAccounts) Err() error {
	return nil
}

func (q *Queries) SaveBotAccounts(ctx context.Context, arg []SaveBotAccountsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"bots"}, []string{"username", "session_id", "proxy", "is_blocked", "started_at"}, &iteratorForSaveBotAccounts{rows: arg})
}

// iteratorForSaveTargetUsers implements pgx.CopyFromSource.
type iteratorForSaveTargetUsers struct {
	rows                 []SaveTargetUsersParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveTargetUsers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveTargetUsers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].DatasetID,
		r.rows[0].Username,
		r.rows[0].UserID,
	}, nil
}

func (r iteratorForSaveTargetUsers) Err() error {
	return nil
}

func (q *Queries) SaveTargetUsers(ctx context.Context, arg []SaveTargetUsersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"targets"}, []string{"dataset_id", "username", "user_id"}, &iteratorForSaveTargetUsers{rows: arg})
}
