// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: copyfrom.go

package dbmodel

import (
	"context"
)

// iteratorForInsertInitialBloggers implements pgx.CopyFromSource.
type iteratorForInsertInitialBloggers struct {
	rows                 []InsertInitialBloggersParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertInitialBloggers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertInitialBloggers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].DatasetID,
		r.rows[0].Username,
		r.rows[0].UserID,
		r.rows[0].IsInitial,
	}, nil
}

func (r iteratorForInsertInitialBloggers) Err() error {
	return nil
}

func (q *Queries) InsertInitialBloggers(ctx context.Context, arg []InsertInitialBloggersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"bloggers"}, []string{"dataset_id", "username", "user_id", "is_initial"}, &iteratorForInsertInitialBloggers{rows: arg})
}

// iteratorForSaveBloggers implements pgx.CopyFromSource.
type iteratorForSaveBloggers struct {
	rows                 []SaveBloggersParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveBloggers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveBloggers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].DatasetID,
		r.rows[0].Username,
		r.rows[0].UserID,
		r.rows[0].FollowersCount,
		r.rows[0].IsInitial,
		r.rows[0].ParsedAt,
		r.rows[0].Parsed,
		r.rows[0].IsPrivate,
		r.rows[0].IsVerified,
		r.rows[0].IsBusiness,
		r.rows[0].FollowingsCount,
		r.rows[0].ContactPhoneNumber,
		r.rows[0].PublicPhoneNumber,
		r.rows[0].PublicPhoneCountryCode,
		r.rows[0].CityName,
		r.rows[0].PublicEmail,
	}, nil
}

func (r iteratorForSaveBloggers) Err() error {
	return nil
}

func (q *Queries) SaveBloggers(ctx context.Context, arg []SaveBloggersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"bloggers"}, []string{"dataset_id", "username", "user_id", "followers_count", "is_initial", "parsed_at", "parsed", "is_private", "is_verified", "is_business", "followings_count", "contact_phone_number", "public_phone_number", "public_phone_country_code", "city_name", "public_email"}, &iteratorForSaveBloggers{rows: arg})
}
