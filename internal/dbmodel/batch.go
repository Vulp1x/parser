// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: batch.go

package dbmodel

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v4"
)

const saveMedias = `-- name: SaveMedias :batchone
insert into medias(pk, id, dataset_id, media_type, code, has_more_comments, caption, width, height, like_count,
                   taken_at, created_at, updated_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, now(), now())
ON CONFLICT (pk, dataset_id) DO UPDATE SET has_more_comments=excluded.has_more_comments,
                                           caption=excluded.caption,
                                           like_count=excluded.like_count,
                                           updated_at=now()
RETURNING pk, id, dataset_id, media_type, code, has_more_comments, caption, width, height, like_count, taken_at, created_at, updated_at
`

type SaveMediasBatchResults struct {
	br  pgx.BatchResults
	ind int
}

type SaveMediasParams struct {
	Pk              int64     `json:"pk"`
	ID              string    `json:"id"`
	DatasetID       uuid.UUID `json:"dataset_id"`
	MediaType       int32     `json:"media_type"`
	Code            string    `json:"code"`
	HasMoreComments bool      `json:"has_more_comments"`
	Caption         string    `json:"caption"`
	Width           int32     `json:"width"`
	Height          int32     `json:"height"`
	LikeCount       int32     `json:"like_count"`
	TakenAt         int32     `json:"taken_at"`
}

func (q *Queries) SaveMedias(ctx context.Context, arg []SaveMediasParams) *SaveMediasBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Pk,
			a.ID,
			a.DatasetID,
			a.MediaType,
			a.Code,
			a.HasMoreComments,
			a.Caption,
			a.Width,
			a.Height,
			a.LikeCount,
			a.TakenAt,
		}
		batch.Queue(saveMedias, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &SaveMediasBatchResults{br, 0}
}

func (b *SaveMediasBatchResults) QueryRow(f func(int, Media, error)) {
	for {
		row := b.br.QueryRow()
		var i Media
		err := row.Scan(
			&i.Pk,
			&i.ID,
			&i.DatasetID,
			&i.MediaType,
			&i.Code,
			&i.HasMoreComments,
			&i.Caption,
			&i.Width,
			&i.Height,
			&i.LikeCount,
			&i.TakenAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if err != nil && (err.Error() == "no result" || err.Error() == "batch already closed") {
			break
		}
		if f != nil {
			f(b.ind, i, err)
		}
		b.ind++
	}
}

func (b *SaveMediasBatchResults) Close() error {
	return b.br.Close()
}
