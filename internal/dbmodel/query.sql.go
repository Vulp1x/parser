// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package dbmodel

import (
	"context"

	"github.com/google/uuid"
	"time"
)

const createDraftDataset = `-- name: CreateDraftDataset :one
insert into datasets (status, title, user_id, status, created_at)
VALUES ($1, $2, $3, 1, now())
RETURNING id
`

type CreateDraftDatasetParams struct {
	Status datasetStatus `json:"status"`
	Title  string        `json:"title"`
	UserID uuid.UUID     `json:"user_id"`
}

func (q *Queries) CreateDraftDataset(ctx context.Context, arg CreateDraftDatasetParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createDraftDataset, arg.Status, arg.Title, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getDatasetByID = `-- name: GetDatasetByID :one
select id, phone_code, status, title, user_id, created_at, started_at, stopped_at, updated_at, deleted_at
from datasets where id = $1
`

func (q *Queries) GetDatasetByID(ctx context.Context, id uuid.UUID) (Dataset, error) {
	row := q.db.QueryRow(ctx, getDatasetByID, id)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.PhoneCode,
		&i.Status,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.StartedAt,
		&i.StoppedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

type SaveBotAccountsParams struct {
	Username  string     `json:"username"`
	SessionID string     `json:"session_id"`
	WorkProxy *string    `json:"work_proxy"`
	IsBlocked bool       `json:"is_blocked"`
	StartedAt *time.Time `json:"started_at"`
}

type SaveTargetUsersParams struct {
	DatasetID uuid.UUID `json:"dataset_id"`
	Username  string    `json:"username"`
	UserID    int64     `json:"user_id"`
}
